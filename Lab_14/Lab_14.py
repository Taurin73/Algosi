class Element:
    def __init__(self, key="", value=0):
        """
        Класс Element представляет элемент данных (ключ и значение) в хэш-таблице.
        """
        self.key = key  # Ключ элемента
        self.value = value  # Значение элемента

class HashMap:
    def __init__(self):
        """
        Класс HashMap представляет хэш-таблицу с использованием списков для разрешения коллизий.
        """
        self.N = 10  # Размер хэш-таблицы
        self.table = [[] for _ in range(self.N)]  # Инициализация списка списков для хранения элементов

    def hash(self, s):
        """
        Функция хэширования принимает строку и возвращает хэш для этой строки.
        """
        h = 0  # Инициализация хэша
        k = 1  # Коэффициент для увеличения степени в полиномиальной хэш-функции
        for c in s:
            h += ord(c) * k  # Обновление хэша с использованием кода символа и текущего коэффициента
            k *= 3  # Увеличение коэффициента для следующего символа
        return h % self.N  # Возврат хэша в диапазоне от 0 до (N-1)

    def add(self, s):
        """
        Метод добавления элемента в хэш-таблицу.
        """
        h = self.hash(s)  # Получение хэша для входной строки
        # Проверка наличия элемента с данным ключом в соответствующем списке
        for element in self.table[h]:
            if element.key == s:
                element.value += 1  # Если ключ существует, увеличиваем значение
                return
        # Если ключ не найден, добавляем новый элемент в список для данного хэша
        self.table[h].append(Element(s, 1))

    def write(self):
        """
        Метод формирования строки для записи в файл.
        """
        s = ""  # Инициализация строки для записи данных
        for i in range(self.N):
            if self.table[i]:
                s += str(i) + '\t'  # Добавление индекса хэша в строку
                for element in self.table[i]:
                    s += element.key + ' ' + str(element.value) + ';' + ' '  # Добавление ключа и значения
                s += '\n'  # Новая строка для следующего индекса хэша
        return s  # Возврат сформированной строки

# Создание экземпляра хэш-таблицы
table = HashMap()

# Чтение входного файла с данными
with open("input14.txt", "r") as in_file:
    for line in in_file:
        words = line.split()  # Разделение строки на слова
        for word in words:
            table.add(word)  # Добавление каждого слова в хэш-таблицу

# Запись результатов в выходной файл
with open("output14.txt", "w") as out_file:
    out_file.write(table.write())  # Запись данных хэш-таблицы в выходной файл


f = open('output14.txt', 'r')

for i in range(6):
    print(f.readline())

